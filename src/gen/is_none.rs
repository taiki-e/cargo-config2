// SPDX-License-Identifier: Apache-2.0 OR MIT
// This file is @generated by cargo-config2-internal-codegen
// (gen_is_none function at tools/codegen/src/main.rs).
// It is not intended for manual editing.

#![cfg_attr(rustfmt, rustfmt::skip)]
impl crate::easy::BuildConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.jobs.is_none() && self.rustc.is_none() && self.rustc_wrapper.is_none()
            && self.rustc_workspace_wrapper.is_none() && self.rustdoc.is_none()
            && self.target.is_none() && self.target_dir.is_none()
            && self.rustflags.is_none() && self.rustdocflags.is_none()
            && self.incremental.is_none() && self.dep_info_basedir.is_none()
    }
}
impl crate::easy::DocConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.browser.is_none()
    }
}
impl crate::easy::FutureIncompatReportConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.frequency.is_none()
    }
}
impl crate::easy::CargoNewConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.vcs.is_none()
    }
}
impl crate::easy::HttpConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.debug.is_none() && self.proxy.is_none() && self.timeout.is_none()
            && self.cainfo.is_none() && self.check_revoke.is_none()
            && self.low_speed_limit.is_none() && self.multiplexing.is_none()
            && self.user_agent.is_none()
    }
}
impl crate::easy::NetConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.retry.is_none() && self.git_fetch_with_cli.is_none()
            && self.offline.is_none()
    }
}
impl crate::easy::RegistryConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.default.is_none() && self.token.is_none()
    }
}
impl crate::easy::TermConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.quiet.is_none() && self.verbose.is_none() && self.color.is_none()
            && self.progress.is_none()
    }
}
impl crate::easy::TermProgressConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.when.is_none() && self.width.is_none()
    }
}
impl crate::de::BuildConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.jobs.is_none() && self.rustc.is_none() && self.rustc_wrapper.is_none()
            && self.rustc_workspace_wrapper.is_none() && self.rustdoc.is_none()
            && self.target.is_none() && self.target_dir.is_none()
            && self.rustflags.is_none() && self.rustdocflags.is_none()
            && self.incremental.is_none() && self.dep_info_basedir.is_none()
    }
}
impl crate::de::DocConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.browser.is_none()
    }
}
impl crate::de::FutureIncompatReportConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.frequency.is_none()
    }
}
impl crate::de::CargoNewConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.vcs.is_none()
    }
}
impl crate::de::HttpConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.debug.is_none() && self.proxy.is_none() && self.timeout.is_none()
            && self.cainfo.is_none() && self.check_revoke.is_none()
            && self.low_speed_limit.is_none() && self.multiplexing.is_none()
            && self.user_agent.is_none()
    }
}
impl crate::de::NetConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.retry.is_none() && self.git_fetch_with_cli.is_none()
            && self.offline.is_none()
    }
}
impl crate::de::RegistryConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.default.is_none() && self.token.is_none()
    }
}
impl crate::de::TermConfig {
    pub(crate) fn is_none(&self) -> bool {
        self.quiet.is_none() && self.verbose.is_none() && self.color.is_none()
            && self.progress.is_none()
    }
}
impl crate::de::TermProgress {
    pub(crate) fn is_none(&self) -> bool {
        self.when.is_none() && self.width.is_none()
    }
}
