// This file is @generated by cargo-config2-internal-codegen.
// It is not intended for manual editing.

#![cfg_attr(rustfmt, rustfmt::skip)]
#![allow(clippy::wildcard_imports)]

impl crate::Build {
    pub(crate) fn is_none(&self) -> bool {
        self.jobs.is_none() && self.rustc.is_none() && self.rustc_wrapper.is_none()
            && self.rustc_workspace_wrapper.is_none() && self.rustdoc.is_none()
            && self.target.is_none() && self.target_dir.is_none()
            && self.rustflags.is_none() && self.rustdocflags.is_none()
            && self.incremental.is_none() && self.dep_info_basedir.is_none()
    }
}
impl crate::Doc {
    pub(crate) fn is_none(&self) -> bool {
        self.browser.is_none()
    }
}
impl crate::FutureIncompatReport {
    pub(crate) fn is_none(&self) -> bool {
        self.frequency.is_none()
    }
}
impl crate::Net {
    pub(crate) fn is_none(&self) -> bool {
        self.retry.is_none() && self.git_fetch_with_cli.is_none()
            && self.offline.is_none()
    }
}
impl crate::Term {
    pub(crate) fn is_none(&self) -> bool {
        self.quiet.is_none() && self.verbose.is_none() && self.color.is_none()
            && self.progress.is_none()
    }
}
impl crate::TermProgress {
    pub(crate) fn is_none(&self) -> bool {
        self.when.is_none() && self.width.is_none()
    }
}
