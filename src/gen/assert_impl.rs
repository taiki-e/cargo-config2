// This file is @generated by cargo-config2-internal-codegen
// (gen_assert_impl function at tools/codegen/src/main.rs).
// It is not intended for manual editing.

#![cfg_attr(rustfmt, rustfmt::skip)]

const _: fn() = || {
    #[allow(unused_imports)]
    use core::marker::PhantomPinned;
    /// Send & !Sync
    #[allow(dead_code)]
    struct NotSync(core::cell::Cell<()>);
    /// !Send & !Sync
    #[allow(dead_code)]
    struct NotSendSync(std::rc::Rc<()>);
    #[allow(dead_code)]
    fn assert_send<T: ?Sized + Send>() {}
    #[allow(dead_code)]
    fn assert_sync<T: ?Sized + Sync>() {}
    #[allow(dead_code)]
    fn assert_unpin<T: ?Sized + Unpin>() {}
    #[allow(unused_macros)]
    macro_rules! assert_not_send {
        ($ty:ty) => {
            static_assertions::assert_not_impl_all!($ty : Send);
        };
    }
    #[allow(unused_macros)]
    macro_rules! assert_not_sync {
        ($ty:ty) => {
            static_assertions::assert_not_impl_all!($ty : Sync);
        };
    }
    #[allow(unused_macros)]
    macro_rules! assert_not_unpin {
        ($ty:ty) => {
            static_assertions::assert_not_impl_all!($ty : Unpin);
        };
    }
    assert_send::<crate::de::Config>();
    assert_sync::<crate::de::Config>();
    assert_unpin::<crate::de::Config>();
    assert_send::<crate::de::BuildConfig>();
    assert_sync::<crate::de::BuildConfig>();
    assert_unpin::<crate::de::BuildConfig>();
    assert_send::<crate::de::TargetConfig>();
    assert_sync::<crate::de::TargetConfig>();
    assert_unpin::<crate::de::TargetConfig>();
    assert_send::<crate::de::DocConfig>();
    assert_sync::<crate::de::DocConfig>();
    assert_unpin::<crate::de::DocConfig>();
    assert_send::<crate::de::EnvConfigValue>();
    assert_sync::<crate::de::EnvConfigValue>();
    assert_unpin::<crate::de::EnvConfigValue>();
    assert_send::<crate::de::FutureIncompatReportConfig>();
    assert_sync::<crate::de::FutureIncompatReportConfig>();
    assert_unpin::<crate::de::FutureIncompatReportConfig>();
    assert_send::<crate::de::NetConfig>();
    assert_sync::<crate::de::NetConfig>();
    assert_unpin::<crate::de::NetConfig>();
    assert_send::<crate::de::TermConfig>();
    assert_sync::<crate::de::TermConfig>();
    assert_unpin::<crate::de::TermConfig>();
    assert_send::<crate::de::TermProgress>();
    assert_sync::<crate::de::TermProgress>();
    assert_unpin::<crate::de::TermProgress>();
    assert_send::<crate::de::Color>();
    assert_sync::<crate::de::Color>();
    assert_unpin::<crate::de::Color>();
    assert_send::<crate::de::When>();
    assert_sync::<crate::de::When>();
    assert_unpin::<crate::de::When>();
    assert_send::<crate::de::Frequency>();
    assert_sync::<crate::de::Frequency>();
    assert_unpin::<crate::de::Frequency>();
    assert_send::<crate::de::Flags>();
    assert_sync::<crate::de::Flags>();
    assert_unpin::<crate::de::Flags>();
    assert_send::<crate::de::ConfigRelativePath>();
    assert_sync::<crate::de::ConfigRelativePath>();
    assert_unpin::<crate::de::ConfigRelativePath>();
    assert_send::<crate::de::PathAndArgs>();
    assert_sync::<crate::de::PathAndArgs>();
    assert_unpin::<crate::de::PathAndArgs>();
    assert_send::<crate::de::StringList>();
    assert_sync::<crate::de::StringList>();
    assert_unpin::<crate::de::StringList>();
    assert_send::<crate::de::StringOrArray>();
    assert_sync::<crate::de::StringOrArray>();
    assert_unpin::<crate::de::StringOrArray>();
    assert_send::<crate::easy::Config>();
    assert_not_sync!(crate::easy::Config);
    assert_unpin::<crate::easy::Config>();
    assert_send::<crate::easy::BuildConfig>();
    assert_sync::<crate::easy::BuildConfig>();
    assert_unpin::<crate::easy::BuildConfig>();
    assert_send::<crate::easy::TargetConfig>();
    assert_sync::<crate::easy::TargetConfig>();
    assert_unpin::<crate::easy::TargetConfig>();
    assert_send::<crate::easy::DocConfig>();
    assert_sync::<crate::easy::DocConfig>();
    assert_unpin::<crate::easy::DocConfig>();
    assert_send::<crate::easy::EnvConfigValue>();
    assert_sync::<crate::easy::EnvConfigValue>();
    assert_unpin::<crate::easy::EnvConfigValue>();
    assert_send::<crate::easy::FutureIncompatReportConfig>();
    assert_sync::<crate::easy::FutureIncompatReportConfig>();
    assert_unpin::<crate::easy::FutureIncompatReportConfig>();
    assert_send::<crate::easy::NetConfig>();
    assert_sync::<crate::easy::NetConfig>();
    assert_unpin::<crate::easy::NetConfig>();
    assert_send::<crate::easy::TermConfig>();
    assert_sync::<crate::easy::TermConfig>();
    assert_unpin::<crate::easy::TermConfig>();
    assert_send::<crate::easy::TermProgressConfig>();
    assert_sync::<crate::easy::TermProgressConfig>();
    assert_unpin::<crate::easy::TermProgressConfig>();
    assert_send::<crate::easy::Flags>();
    assert_sync::<crate::easy::Flags>();
    assert_unpin::<crate::easy::Flags>();
    assert_send::<crate::easy::PathAndArgs>();
    assert_sync::<crate::easy::PathAndArgs>();
    assert_unpin::<crate::easy::PathAndArgs>();
    assert_send::<crate::easy::StringList>();
    assert_sync::<crate::easy::StringList>();
    assert_unpin::<crate::easy::StringList>();
    assert_send::<crate::resolve::ResolveOptions>();
    assert_sync::<crate::resolve::ResolveOptions>();
    assert_unpin::<crate::resolve::ResolveOptions>();
    assert_send::<crate::resolve::TargetTripleRef<'_>>();
    assert_sync::<crate::resolve::TargetTripleRef<'_>>();
    assert_unpin::<crate::resolve::TargetTripleRef<'_>>();
    assert_send::<crate::resolve::TargetTriple>();
    assert_sync::<crate::resolve::TargetTriple>();
    assert_unpin::<crate::resolve::TargetTriple>();
    assert_send::<crate::value::Value<()>>();
    assert_send::<crate::value::Value<NotSync>>();
    assert_not_send!(crate::value::Value<NotSendSync>);
    assert_sync::<crate::value::Value<()>>();
    assert_not_sync!(crate::value::Value<NotSync>);
    assert_not_sync!(crate::value::Value<NotSendSync>);
    assert_unpin::<crate::value::Value<()>>();
    assert_not_unpin!(crate::value::Value<PhantomPinned>);
    assert_send::<crate::value::Definition>();
    assert_sync::<crate::value::Definition>();
    assert_unpin::<crate::value::Definition>();
    assert_send::<crate::walk::Walk<'_>>();
    assert_sync::<crate::walk::Walk<'_>>();
    assert_unpin::<crate::walk::Walk<'_>>();
};
